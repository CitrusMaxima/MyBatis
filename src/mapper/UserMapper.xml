<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.UserMapper">
    <!--定义resultMap-->
    <resultMap id="userListResultMap" type="user">
        <id column="id_" property="id" />
        <!--result就是普通列映射配置-->
        <result column="username_" property="username" />
        <result column="birthday_" property="birthday" />
    </resultMap>

    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND username LIKE '%${userCustom.username}%'
            </if>
            <if test="userCustom.sex!=null and userCustom!=''">
                AND sex = #{userCustom.sex}
            </if>
        </if>
    </sql>

    <!--根据id查询用户信息-->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id = #{id}
    </select>
    <!--根据用户名模糊查询用户信息-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="user">
        SELECT * FROM user WHERE username like '%${value}%'
    </select>

    <!--添加用户-->
    <insert id="insertUser" parameterType="user">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user VALUE (#{id}, #{username}, #{birthday}, #{sex}, #{address})
    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="user">
        UPDATE user SET username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} WHERE id=#{id}
    </update>

    <!--自定义查询条件查询用户信息-->
    <select id="findUserList" parameterType="userQueryVo" resultType="user">
        SELECT id, username, birthday FROM USER
        <where>
            <!--
            引用sql片段，如果sql片段和引用处不在同一个mapper.xml
            则必须在前面加上namespace
            -->
        <include refid="query_user_where"></include>
        </where>
    </select>

    <!--
    输出简单类型
    功能：自定义查询条件，返回查询个数，通常用于实现查询分页
    -->
    <select id="findUserCount" parameterType="userQueryVo" resultType="int">
        SELECT COUNT(*) FROM user
        <where>
            <include refid="query_user_where"></include>
        </where>

    </select>

    <!--使用resultMap作结果映射-->
    <select id="findUserListResultMap" parameterType="userQueryVo" resultMap="userListResultMap">
        SELECT id id_, username username_, birthday birthday_ FROM user WHERE username LIKE '%${userCustom.username}%'
    </select>
</mapper>